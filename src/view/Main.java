
package view;

import control.DBAccess;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import model.Assigned;
import model.Doctor;
import model.Patient;


public class Main extends javax.swing.JFrame {
    
    private AddDoctor addProfessor = new AddDoctor();

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        fillDoctorTable();
        fillPateintTable();
        fillAssignedTable();
    }
    
    public final void fill() {
        fillDoctorTable();
        fillPateintTable();
        fillAssignedTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        butAddProf = new javax.swing.JButton();
        butDelProf = new javax.swing.JButton();
        butAddProf1 = new javax.swing.JButton();
        butDelProf1 = new javax.swing.JButton();
        butAddProf2 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableAssigned = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableDoctors = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablePatient = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hospital Manager");
        setResizable(false);

        butAddProf.setBackground(new java.awt.Color(255, 51, 51));
        butAddProf.setText("Add Doctor");
        butAddProf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAddProfActionPerformed(evt);
            }
        });

        butDelProf.setText("Manage Doctor");
        butDelProf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butDelProfActionPerformed(evt);
            }
        });

        butAddProf1.setText("Add Patient");
        butAddProf1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAddProf1ActionPerformed(evt);
            }
        });

        butDelProf1.setText("Manage Patient");
        butDelProf1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butDelProf1ActionPerformed(evt);
            }
        });

        butAddProf2.setText("New Appointment");
        butAddProf2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAddProf2ActionPerformed(evt);
            }
        });

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTabbedPane1.setName("ALL"); // NOI18N

        tableAssigned.setBackground(new java.awt.Color(255, 204, 204));
        tableAssigned.setForeground(new java.awt.Color(102, 102, 255));
        tableAssigned.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Patient Name", "Doctor Name", "Branch"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableAssigned);

        jTabbedPane1.addTab("Assigned Patients", jScrollPane1);

        tableDoctors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Specialty", "Branch"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableDoctors);

        jTabbedPane1.addTab("Doctors", jScrollPane2);

        tablePatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tablePatient);

        jTabbedPane1.addTab("Patients", jScrollPane3);

        jButton2.setBackground(new java.awt.Color(102, 255, 102));
        jButton2.setForeground(new java.awt.Color(102, 204, 255));
        jButton2.setText("Refresh");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(butAddProf, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(butAddProf1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(butDelProf1)
                        .addGap(18, 18, 18)
                        .addComponent(butDelProf)
                        .addGap(18, 18, 18)
                        .addComponent(butAddProf2)
                        .addGap(25, 25, 25))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1)
                        .addGap(83, 83, 83)
                        .addComponent(jButton2)
                        .addGap(15, 15, 15))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(butAddProf)
                    .addComponent(butAddProf1)
                    .addComponent(butDelProf1)
                    .addComponent(butDelProf)
                    .addComponent(butAddProf2))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
                        .addGap(36, 36, 36))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addContainerGap())))
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("tabs");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void butAddProfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butAddProfActionPerformed
        new AddDoctor().setVisible(true);
    }//GEN-LAST:event_butAddProfActionPerformed

    private void butDelProfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butDelProfActionPerformed
        new EditDoctor().setVisible(true);
    }//GEN-LAST:event_butDelProfActionPerformed

    private void butAddProf1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butAddProf1ActionPerformed
        AddPatient addPatient = new AddPatient();
        addPatient.setVisible(true);
    }//GEN-LAST:event_butAddProf1ActionPerformed

    private void butDelProf1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butDelProf1ActionPerformed
        new EditPatient().setVisible(true);
    }//GEN-LAST:event_butDelProf1ActionPerformed

    private void butAddProf2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butAddProf2ActionPerformed
        new Link().setVisible(true);
    }//GEN-LAST:event_butAddProf2ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.fill();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    static JLabel l; 
    public static void main(String args[]) {
        final JFrame frame = new JFrame("JDialog Demo");
        final JButton btnLogin = new JButton("Click to login");
        
        l = new JLabel();
        l.setText("admin/123"); 

        btnLogin.addActionListener(
                new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                Login loginDlg = new Login(frame);
                loginDlg.setVisible(true);
                // if logon successfully
                if (loginDlg.isSucceeded()) 
                {
                    btnLogin.setText("Hi " + loginDlg.getUsername() + "!");
                    java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                            new Main().setVisible(true);
                        }
                    });
                }
            }
        });

        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(300, 100);
        frame.setLayout(new FlowLayout());
        frame.getContentPane().add(btnLogin);
        frame.setVisible(true);
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
    }
    
    public final void fillDoctorTable() {
        DBAccess db = new DBAccess();
        ArrayList<Doctor> doctors = db.getAllDoctors();
        int rows = doctors.size();
        System.out.println(tableDoctors.getRowCount());
        DefaultTableModel model = new DefaultTableModel(rows, 4);
        tableDoctors.setModel(model);
        tableDoctors.getColumnModel().getColumn(0).setHeaderValue("Id");
        tableDoctors.getColumnModel().getColumn(1).setHeaderValue("Name");
        tableDoctors.getColumnModel().getColumn(2).setHeaderValue("Specialty");
        tableDoctors.getColumnModel().getColumn(3).setHeaderValue("Branch");
        tableDoctors.getColumnModel().getColumn(0).setResizable(false);
        tableDoctors.getColumnModel().getColumn(1).setResizable(false);
        tableDoctors.getColumnModel().getColumn(2).setResizable(false);
        tableDoctors.getColumnModel().getColumn(3).setResizable(false);
        tableDoctors.setEnabled(false);
        Doctor doctor = null;
        for(int i=0; i < doctors.size(); i++) {
            doctor = doctors.get(i);
            tableDoctors.setValueAt(doctor.getId(), i, 0);
            tableDoctors.setValueAt(doctor.getName(), i, 1);
            tableDoctors.setValueAt(doctor.getSpec(), i, 2);
            tableDoctors.setValueAt(doctor.getBranch(), i, 3);
        }
    }
    
    public final void fillPateintTable() {
        DBAccess db = new DBAccess();
        ArrayList<Patient> patients = db.getAllPatients();
        int rows = patients.size();
        System.out.println(tablePatient.getRowCount());
        DefaultTableModel model = new DefaultTableModel(rows, 4);
        tablePatient.setModel(model);
        tablePatient.getColumnModel().getColumn(0).setHeaderValue("Id");
        tablePatient.getColumnModel().getColumn(1).setHeaderValue("Name");
        tablePatient.getColumnModel().getColumn(2).setHeaderValue("Phone");
        tablePatient.getColumnModel().getColumn(3).setHeaderValue("Blood Type");
        tablePatient.getColumnModel().getColumn(0).setResizable(false);
        tablePatient.getColumnModel().getColumn(1).setResizable(false);
        tablePatient.getColumnModel().getColumn(2).setResizable(false);
        tablePatient.getColumnModel().getColumn(3).setResizable(false);
        tablePatient.setEnabled(false);
        Patient patient = null;
        for(int i=0; i < patients.size(); i++) {
            patient = patients.get(i);
            System.out.println();
            tablePatient.setValueAt(patient.getId(), i, 0);
            tablePatient.setValueAt(patient.getName(), i, 1);
            tablePatient.setValueAt(patient.getPhone(), i, 2);
            tablePatient.setValueAt(patient.getBlood().getName(), i, 3);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butAddProf;
    private javax.swing.JButton butAddProf1;
    private javax.swing.JButton butAddProf2;
    private javax.swing.JButton butDelProf;
    private javax.swing.JButton butDelProf1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tableAssigned;
    private javax.swing.JTable tableDoctors;
    private javax.swing.JTable tablePatient;
    // End of variables declaration//GEN-END:variables

    private final void fillAssignedTable() {
        DBAccess db = new DBAccess();
        ArrayList<Assigned> data = db.getAllAssigned();
        int rows = data.size();
        System.out.println(tableAssigned.getRowCount());
        DefaultTableModel model = new DefaultTableModel(rows, 4);
        tableAssigned.setModel(model);
        tableAssigned.getColumnModel().getColumn(0).setHeaderValue("#");
        tableAssigned.getColumnModel().getColumn(1).setHeaderValue("Patient Name");
        tableAssigned.getColumnModel().getColumn(2).setHeaderValue("Doctor Name");
        tableAssigned.getColumnModel().getColumn(3).setHeaderValue("Branch");
        tableAssigned.getColumnModel().getColumn(0).setResizable(false);
        tableAssigned.getColumnModel().getColumn(1).setResizable(false);
        tableAssigned.getColumnModel().getColumn(2).setResizable(false);
        tableAssigned.getColumnModel().getColumn(3).setResizable(false);
        tableAssigned.setEnabled(false);
        Assigned datium = null;
        System.out.println(data);
        for(int i=0; i < data.size(); i++) {
            datium = data.get(i);
            System.out.println(datium);
            tableAssigned.setValueAt(i+1, i, 0);
            tableAssigned.setValueAt(datium.getPatient().getName(), i, 1);
            tableAssigned.setValueAt(datium.getDoctor().getName(), i, 2);
            tableAssigned.setValueAt(datium.getDoctor().getBranch(), i, 3);
        }
    }
}
